ungroup()
original_books
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
tidy_books
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
stop_words
tidy_books %>%
count(word, sort = TRUE)
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(ggplot2)
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
#mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
install.packages('gutenbergr')
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
# Download new texts
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells %>%
count(word, sort = TRUE)
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))
tidy_bronte <- bronte %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_bronte %>%
count(word, sort = TRUE)
library(tidyr)
?mutate
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen"))
frequency
library(tidyr)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Brontë Sisters`:`H.G. Wells`)
frequency
library(scales)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `Jane Austen`, color = abs(`Jane Austen` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "Jane Austen", x = NULL)
cor.test(data = frequency[frequency$author == "Brontë Sisters",],
~ proportion + `Jane Austen`)
cor.test(data = frequency[frequency$author == "H.G. Wells",],
~ proportion + `Jane Austen`)
library(tidytext)
sentiments
sentiments[1:50, ]
?tibble
sentiments
unique(sentiments$lexicon)
filter(sentiments, lexion = "nrc")
filter(sentiments, lexion == "nrc")
filter(sentiments, lexicon == "nrc")
filter(sentiments, lexicon == "bing")
filter(sentiments, lexicon == "loughran")
filter(sentiments, lexicon == "AFINN")
get_sentiments("afinn")
get_sentiments("nrc")
library(SparkR)
(SparkR)
?install.spark
??install.spark
install.spark()
sc <- sparkR.init(master="local")
sc <- sparkR.session(master="local")
?sparkR.session
sc <- sparkR.session(master = "local")
# Run package and initialize Spark
library(SparkR)
sc <- spark.session(master = "local[1]")
sc <- sparkR.session(master = "local[1]")
sc <- sparkR.session()
list.files(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"))
.libPaths(c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"), .libPaths()))
sc <- sparkR.session()
sparkEnvir <- list(spark.executor.instance = '10',
spark.yarn.executor.memoryOverhead = '8000')
sc <- sparkR.session(
sparkEnvir = sparkEnvir,
sparkPackages = "com.databricks:spark-csv_2.10:1.3.0"
)
SPARK_HOME
Sys.getenv(SPARK_HOME)
Sys.setenv(SPARK_HOME = "C:/Spark/spark-2.1.1-bin-hadoop2.7")
?randomForest
library(randomForest)
?randomForest
install.packages("plotROC")
library(ggplot2)
library(plotROC)
D.ex <- rbinom(200, size = 1, prob = .5)
M1 <- rnorm(200, mean = D.ex, sd = .65)
M2 <- rnorm(200, mean = D.ex, sd = 1.5)
test <- data.frame(D = D.ex, D.str = c("Healthy", "Ill")[D.ex + 1],
M1 = M1, M2 = M2, stringsAsFactors = FALSE)
# The Roc Geom
# Next I use the ggplot function to define the aesthetics, and
# the geom_roc function to add an ROC curve layer.
basicplot <- ggplot(test, aes(d = D, m = M1)) + geom_roc()
basicplot
View(test)
?geom_roc
install.packages("KernSmoothR")
install.packages("KernSmooth")
library(KernSmooth)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
Diet
BodyWeight
ibrary(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g <- ggplot(movies, aes(votes, rating))
library(datasets)
movies
data(movies)
g <- qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
print(g)
ggplot(airquality, aes(Wind, Ozone))
qplot(votes, rating, data = movies)
swirl
swirl()
library(swirl)
install.packages('swirl')
swirl
swirl()
library(swirl)
swirl()
dataFrame
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "blue")
abline(h = 0.4, col = "red")
5
12
abline(h = 0.05, col = "green")
View(dFsm)
dist(dFsm)
plot(hc)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
point(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
point(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2))
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, wchi.min)
apply(distTmp, 2, which.min)
?histogram
?hist
quit()
setwd("C:/Users/wiktor.zdzienicki/OneDrive - ITMAGINATION Sp. z o.o/Prywatny/Repos/Coursera-Data-Science/Reproducible Research")
setwd("C:/Users/wiktor.zdzienicki/OneDrive - ITMAGINATION Sp. z o.o/Prywatny/Repos/Coursera-Data-Science/Reproducible Research/Projects")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
"storm.bz2")
list.files()
library(tidyverse)
storm <- read_csv("storm.bz2")
View(storm)
sapply(storm, colMeans(is.na()))
sapply(storm, colMeans(is.na(storm)))
is.na(storm)
colMeans(is.na(storm))
table(storm$EVTYPE)
storm <- read.csv("storm.bz2", 10)
storm <- read.csv("storm.csv", 10)
?read_csv
storm <- read_csv("storm.csv", n_max = 10)
View(storm)
View(storm)
storm <- read_csv("storm.csv"), n_max = 100)
storm <- read_csv("storm.csv", n_max = 100)
View(storm)
?dmy
dmy(storm$BGN_DATE)
library(tidyverse)
dmy(storm$BGN_DATE)
library(lubridate)
dmy(storm$BGN_DATE)
ymd(storm$BGN_DATE)
library(stringr)
str_extract(storm$BGN_DATE, "/s{1,2}///s{1,2}///s{4}")
str_extract(storm$BGN_DATE, "\\s{1,2}\\\\s{1,2}\\\\s{4}")
str_extract(storm$BGN_DATE, "\\s{1,2}"
str_extract(storm$BGN_DATE, "\\s{1,2}")
str_extract(storm$BGN_DATE, "\\s{1,2}")
str_extract(storm$BGN_DATE, "\\d{1,2}")
str_extract(storm$BGN_DATE, "\\d{1,2}\\")
str_extract(storm$BGN_DATE, "\\d{1,2}\\\")
str_extract(storm$BGN_DATE, "\\d{1,2}")
str_extract(storm$BGN_DATE, "\\d{1,2}\\\")
str_extract(storm$BGN_DATE, "\\d{1,2}\\")
str_extract(storm$BGN_DATE, "\\d{1,2}/")
str_extract(storm$BGN_DATE, "\\d{1,2}/s{1,2}")
str_extract(storm$BGN_DATE, "\d{1,2}/\d{1,2}")
str_extract(storm$BGN_DATE, "\\d{1,2}/\\d{1,2}")
str_extract(storm$BGN_DATE, "\\d{1,2}/\\d{1,2}/\\d{4}")
dmy(str_extract(storm$BGN_DATE, "\\d{1,2}/\\d{1,2}/\\d{4}"))
ymd(str_extract(storm$BGN_DATE, "\\d{1,2}/\\d{1,2}/\\d{4}"))
mdy(str_extract(storm$BGN_DATE, "\\d{1,2}/\\d{1,2}/\\d{4}"))
glimpse(storm)
View(storm)
View(storm)
data_raw <- read_csv("storm.csv")
data <- data_raw %>%
select(State = STATE__, Date = BGN_DATE, County = COUNTYNAME, Event = EVTYPE,
Fatalities = FATALITIES, Injuries = INJURIES, Property_Damage = PROPDMG, Crop_Damage = CROPDMG) %>%
mutate(Date = mdy(str_extract(Date, "\\d{1,2}/\\d{1,2}/\\d{4}")))
View(data)
table(data$Date)
glimpse(data)
table(data$Event)
sort(table(data$Event))
sort(table(data$State))
glimpse(data_raw)
data <- data_raw %>%
select(State = STATE, Date = BGN_DATE, County = COUNTYNAME, Event = EVTYPE,
Fatalities = FATALITIES, Injuries = INJURIES, Property_Damage = PROPDMG, Crop_Damage = CROPDMG) %>%
mutate(Date = mdy(str_extract(Date, "\\d{1,2}/\\d{1,2}/\\d{4}")))
sort(table(data$State))
data %>%
count(State) %>%
arrange(desc(n))
data %>%
count(Event) %>%
arrange(desc(n))
data %>%
count(Event) %>%
arrange(desc(n)) %>%
print(n = 50)
data <- data %>%
mutate(ifelse(Event %in% c("TSTM WIND", "THUNDERSTORM WINDS"), "THUNDERSTORM WIND", Event))
data %>%
count(Event) %>%
arrange(desc(n)) %>%
print(n = 50)
data <- data %>%
mutate(Event = ifelse(Event %in% c("TSTM WIND", "THUNDERSTORM WINDS"), "THUNDERSTORM WIND", Event))
data %>%
count(Event) %>%
arrange(desc(n)) %>%
print(n = 50)
data %>%
count(Date) %>%
arrange(Date)
ggplot(data) + geom_line(aes(Date, n))
data %>%
count(Date) %>%
arrange(Date) %>%
ggplot() + geom_line(aes(Date, n))
data %>%
count(Date) %>%
arrange(Date) %>%
ggplot() + geom_line(aes(Date, n), group = 1)
data %>%
count(Date) %>%
arrange(Date) %>%
ggplot() + geom_line(aes(Date, n), group = Date)
data %>%
count(Date) %>%
arrange(Date) %>%
ggplot() + geom_line(aes(Date, n, Group = 1))
data %>%
count(Date) %>%
arrange(Date) %>%
ggplot() + geom_line(aes(Date, n, Group = Date))
data <- data_raw %>%
select(State = STATE, Date = BGN_DATE, County = COUNTYNAME, Event = EVTYPE,
Fatalities = FATALITIES, Injuries = INJURIES, Property_Damage = PROPDMG, Crop_Damage = CROPDMG) %>%
mutate(Date = mdy(str_extract(Date, "\\d{1,2}/\\d{1,2}/\\d{4}")),
year = year(Date))
table(data$Year)
data <- data_raw %>%
select(State = STATE, Date = BGN_DATE, County = COUNTYNAME, Event = EVTYPE,
Fatalities = FATALITIES, Injuries = INJURIES, Property_Damage = PROPDMG, Crop_Damage = CROPDMG) %>%
mutate(Date = mdy(str_extract(Date, "\\d{1,2}/\\d{1,2}/\\d{4}")),
Year = year(Date))
table(data$Year)
data %>%
count(Date) %>%
arrange(Date) %>%
ggplot() + geom_line(aes(Year, n, Group = Date))
data %>%
count(Date) %>%
arrange(Date) %>%
ggplot() + geom_line(aes(Year, n))
data
data %>%
count(Year) %>%
arrange(Year) %>%
ggplot() + geom_line(aes(Year, n))
data %>%
count(Year) %>%
arrange(Year) %>%
ggplot() + geom_line(aes(Year, n), col = "darkred", lwd = 1)
data %>%
count(Year) %>%
arrange(Year) %>%
ggplot() + geom_line(aes(Year, n), col = "darkred", lwd = 1) + theme_bw()
data %>%
count(Year) %>%
arrange(Year) %>%
ggplot() + geom_line(aes(Year, n), col = "darkred", lwd = 1) + ggtitle("Yearly number of events") +
ylab("")
data %>%
count(State) %>%
arrange(desc(n))
data %>%
count(Event) %>%
arrange(desc(n)) %>%
print(n = 50)
data <- data %>%
mutate(Event = ifelse(Event %in% c("TSTM WIND", "THUNDERSTORM WINDS"), "THUNDERSTORM WIND", Event)) %>%
count(Event) %>%
arrange(desc(n))
data
data <- data %>%
mutate(Event = ifelse(Event %in% c("TSTM WIND", "THUNDERSTORM WINDS"), "THUNDERSTORM WIND", Event)) %>%
count(Event) %>%
arrange(desc(n))
data %>%
count(State) %>%
arrange(desc(n))
data <- data_raw %>%
select(State = STATE, Date = BGN_DATE, County = COUNTYNAME, Event = EVTYPE,
Fatalities = FATALITIES, Injuries = INJURIES, Property_Damage = PROPDMG, Crop_Damage = CROPDMG) %>%
mutate(Date = mdy(str_extract(Date, "\\d{1,2}/\\d{1,2}/\\d{4}")),
Year = year(Date))
data %>%
count(State) %>%
arrange(desc(n))
data %>%
count(Event) %>%
arrange(desc(n))
data <- data %>%
mutate(Event = ifelse(Event %in% c("TSTM WIND", "THUNDERSTORM WINDS"), "THUNDERSTORM WIND", Event)) %>%
count(Event) %>%
arrange(desc(n))
data
data %>%
count(Year) %>%
arrange(Year) %>%
ggplot() + geom_line(aes(Year, n), col = "darkred", lwd = 1) + ggtitle("Yearly number of events") +
ylab("")
data <- data_raw %>%
select(State = STATE, Date = BGN_DATE, County = COUNTYNAME, Event = EVTYPE,
Fatalities = FATALITIES, Injuries = INJURIES, Property_Damage = PROPDMG, Crop_Damage = CROPDMG) %>%
mutate(Date = mdy(str_extract(Date, "\\d{1,2}/\\d{1,2}/\\d{4}")),
Year = year(Date))
data %>%
count(Year) %>%
arrange(Year) %>%
ggplot() + geom_line(aes(Year, n), col = "darkred", lwd = 1) + ggtitle("Yearly number of events") +
ylab("")
data %>%
count(Year) %>%
arrange(Year) %>%
ggplot() + geom_line(aes(Year, n), col = "darkred", lwd = 1) + ggtitle("Yearly number of events") +
ylab("")
data <- data_raw %>%
select(State = STATE, Date = BGN_DATE, County = COUNTYNAME, Event = EVTYPE,
Fatalities = FATALITIES, Injuries = INJURIES, Property_Damage = PROPDMG, Crop_Damage = CROPDMG) %>%
mutate(Date = mdy(str_extract(Date, "\\d{1,2}/\\d{1,2}/\\d{4}")),
Year = year(Date))
lol <- data[1:10, ]
glimpse(lol)
data %>%
count(Fatilities)
data %>%
count(Fatalities)
data %>%
count(Event, Fatalities)
data %>%
group_by(Event) %>%
summarise(Fatalities = sum(Fatalities))
data %>%
group_by(Event) %>%
summarise(Fatalities = sum(Fatalities)) %>%
arrange(desc(Fatalities))
data %>%
group_by(Event) %>%
summarise(Fatalities = sum(Fatalities),
Injuries = sum(Injuries)) %>%
arrange(desc(Fatalities))
data %>%
group_by(Event) %>%
summarise(Fatalities = sum(Fatalities),
Injuries = sum(Injuries)) %>%
arrange(desc(Injuries))
data <- data %>%
mutate(Event = ifelse(Event %in% c("TSTM WIND", "THUNDERSTORM WINDS"), "THUNDERSTORM WIND", Event)) %>%
count(Event) %>%
# recoding some variables
data <- data %>%
mutate(Event = ifelse(Event %in% c("TSTM WIND", "THUNDERSTORM WINDS"), "THUNDERSTORM WIND", Event)) %>%
count(Event) %>%
arrange(desc(n))
data
# recoding some variables
data <- data %>%
mutate(Event = ifelse(Event %in% c("TSTM WIND", "THUNDERSTORM WINDS"), "THUNDERSTORM WIND", Event)) %>%
count(Event) %>%
arrange(desc(n))
data
# which were the most harmful
data %>%
group_by(Event) %>%
summarise(Fatalities = sum(Fatalities),
Injuries = sum(Injuries)) %>%
arrange(desc(Injuries))
# preprocessing
data <- data_raw %>%
select(State = STATE, Date = BGN_DATE, County = COUNTYNAME, Event = EVTYPE,
Fatalities = FATALITIES, Injuries = INJURIES, Property_Damage = PROPDMG, Crop_Damage = CROPDMG) %>%
mutate(Date = mdy(str_extract(Date, "\\d{1,2}/\\d{1,2}/\\d{4}")),
Year = year(Date))
# quick glance at the population and time span
data %>%
count(State) %>%
arrange(desc(n))
data %>%
count(Event) %>%
arrange(desc(n))
# recoding some variables
data <- data %>%
mutate(Event = ifelse(Event %in% c("TSTM WIND", "THUNDERSTORM WINDS"), "THUNDERSTORM WIND", Event))
data %>%
count(Event) %>%
arrange(desc(n))
# which were the most harmful
data %>%
group_by(Event) %>%
summarise(Fatalities = sum(Fatalities),
Injuries = sum(Injuries)) %>%
arrange(desc(Injuries))
